#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum ELauncherType {
    #[default]
    SingleApp = todo!(),
    SteamChina = todo!(),
    Headless = todo!(),
    ClientUI = todo!(),
    CSGO = todo!(),
    CmdLine = todo!(),
    Nexon = todo!(),
    PerfectWorld = todo!(),
    Default = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum ESteamRealm {
    #[default]
    SteamChina = todo!(),
    SteamGlobal = todo!(),
    Unknown = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum ESteamIPv6ConnectivityState {
    #[default]
    Bad = todo!(),
    Good = todo!(),
    Unknown = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum ESteamIPv6ConnectivityProtocol {
    #[default]
    Udp = todo!(),
    Http = todo!(),
    Invalid = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum ELobbyDistanceFilter {
    #[default]
    Worldwide = todo!(),
    Far = todo!(),
    Default = todo!(),
    Close = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum ELobbyComparison {
    #[default]
    NotEqual = todo!(),
    EqualToOrGreaterThan = todo!(),
    GreaterThan = todo!(),
    Equal = todo!(),
    LessThan = todo!(),
    EqualToOrLessThan = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum ELobbyFilterType {
    #[default]
    Distance = todo!(),
    NearValue = todo!(),
    SlotsAvailable = todo!(),
    Numerical = todo!(),
    String = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum ELobbyType {
    #[default]
    PrivateUnique = todo!(),
    Invisible = todo!(),
    Public = todo!(),
    FriendsOnly = todo!(),
    Private = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum ETradeOfferConfirmationMethod {
    #[default]
    MobileApp = todo!(),
    Email = todo!(),
    Invalid = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum ETradeOfferState {
    #[default]
    InEscrow = todo!(),
    CanceledBySecondFactor = todo!(),
    CreatedNeedsConfirmation = todo!(),
    InvalidItems = todo!(),
    Declined = todo!(),
    Canceled = todo!(),
    Expired = todo!(),
    Countered = todo!(),
    Accepted = todo!(),
    Active = todo!(),
    Invalid = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EVoiceCallState {
    #[default]
    Connected = todo!(),
    NotifyingVoiceChatOfWebRTCSession = todo!(),
    RequestedPermission = todo!(),
    WebRTCConnectedWaitingOnIceConnected = todo!(),
    InitatedWebRTCSession = todo!(),
    CreatePeerConnection = todo!(),
    LocalMicOnly = todo!(),
    RequestedMicAccess = todo!(),
    ScheduledInitiate = todo!(),
    None = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EChatRoomJoinState {
    #[default]
    Joined = todo!(),
    None = todo!(),
    Default = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EChatRoomGroupAction {
    #[default]
    SetWatchingBroadcast = todo!(),
    MentionAll = todo!(),
    ChangeUserRoles = todo!(),
    ChangeGroupRoles = todo!(),
    ViewHistory = todo!(),
    Chat = todo!(),
    ChangeTaglineAvatarName = todo!(),
    Invite = todo!(),
    Ban = todo!(),
    Kick = todo!(),
    CreateRenameDeleteChannel = todo!(),
    Default = todo!(),
}

bitflags! {
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct EChatRoomGroupPermissions: i32 {
        const CAN_ADMIN_CHANNEL = todo!();
        const CAN_BAN = todo!();
        const CAN_KICK = todo!();
        const CAN_INVITE = todo!();
        const VALID = todo!();
        const DEFAULT = todo!();
    }
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EChatRoomGroupRank {
    #[default]
    Owner = todo!(),
    Officer = todo!(),
    Moderator = todo!(),
    Member = todo!(),
    Guest = todo!(),
    Viewer = todo!(),
    Default = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EChatRoomServerMsg {
    #[default]
    AppCustom = todo!(),
    ChatRoomAvatarChanged = todo!(),
    ChatRoomTaglineChanged = todo!(),
    InviteDismissed = todo!(),
    Invited = todo!(),
    Kicked = todo!(),
    Parted = todo!(),
    Joined = todo!(),
    RenameChatRoom = todo!(),
    Invalid = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EChatRoomMemberStateChange {
    #[default]
    RolesChanged = todo!(),
    Banned = todo!(),
    Muted = todo!(),
    InviteDismissed = todo!(),
    RankChanged = todo!(),
    Invited = todo!(),
    Kicked = todo!(),
    Parted = todo!(),
    Joined = todo!(),
    Invalid = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EChatroomNotificationLevel {
    #[default]
    AllMessages = todo!(),
    MentionAll = todo!(),
    MentionMe = todo!(),
    None = todo!(),
    Invalid = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EChatRoomGroupType {
    #[default]
    Unmoderated = todo!(),
    Default = todo!(),
}

bitflags! {
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct EAppType: i32 {
        #[deprecated]
        const DEPOT_ONLY = todo!();
        const SHORTCUT = todo!();
        const BETA = todo!();
        const COMIC = todo!();
        const SERIES = todo!();
        const MUSIC = todo!();
        const PLUGIN = todo!();
        const VIDEO = todo!();
        const FRANCHISE = todo!();
        const HARDWARE = todo!();
        const CONFIG = todo!();
        const DRIVER = todo!();
        const GUIDE = todo!();
        const DLC = todo!();
        const DEPRECTED = todo!();
        const DEMO = todo!();
        const TOOL = todo!();
        const APPLICATION = todo!();
        const GAME = todo!();
        const INVALID = todo!();
    }
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EDisplayStatus {
    #[default]
    Purchase = todo!(),
    AvailGuestPass = todo!(),
    AvailToBorrow = todo!(),
    AvailForFree = todo!(),
    LicenseExpired = todo!(),
    LicensePending = todo!(),
    DownloadDisabled = todo!(),
    DownloadRequired = todo!(),
    DownloadQueued = todo!(),
    DownloadPaused = todo!(),
    UpdateDisabled = todo!(),
    UpdateRequired = todo!(),
    UpdateQueued = todo!(),
    UpdatePaused = todo!(),
    BorrowerLocked = todo!(),
    PreloadOnly = todo!(),
    ParentalBlocked = todo!(),
    InvalidPlatform = todo!(),
    PresaleOnly = todo!(),
    RegionRestricted = todo!(),
    ReadyToLaunch = todo!(),
    ReadyToPreload = todo!(),
    ReadyToInstall = todo!(),
    Synchronizing = todo!(),
    Downloading = todo!(),
    Updating = todo!(),
    Validating = todo!(),
    Running = todo!(),
    Installing = todo!(),
    Uninstalling = todo!(),
    Launching = todo!(),
    Invalid = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EPublishedFileInappropriateResult {
    #[default]
    VeryLikely = todo!(),
    Likely = todo!(),
    Possible = todo!(),
    Unlikely = todo!(),
    VeryUnlikely = todo!(),
    NotScanned = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EPublishedFileInappropriateProvider {
    #[default]
    Amazon = todo!(),
    Google = todo!(),
    Invalid = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EPublishedFileQueryType {
    #[default]
    RankedByInappropriateContentRating = todo!(),
    RankedByLifetimePlaytimeSessions = todo!(),
    RankedByPlaytimeSessionsTrend = todo!(),
    RankedByLifetimeAveragePlaytime = todo!(),
    RankedByAveragePlaytimeTrend = todo!(),
    RankedByTotalPlaytime = todo!(),
    RankedByPlaytimeTrend = todo!(),
    RankedByTextSearch = todo!(),
    RankedByVotesUp = todo!(),
    RankedByTotalVotesAsc = todo!(),
    RankedByTotalUniqueSubscriptions = todo!(),
    NotYetRated = todo!(),
    CreatedByFollowedUsersRankedByPublicationDate = todo!(),
    RankedByNumTimesReported = todo!(),
    CreatedByFriendsRankedByPublicationDate = todo!(),
    FavoritedByFriendsRankedByPublicationDate = todo!(),
    RankedByTrend = todo!(),
    AcceptedForGameRankedByAcceptanceDate = todo!(),
    RankedByPublicationDate = todo!(),
    RankedByVote = todo!(),
}

bitflags! {
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct EUCMFilePrivacyState: i32 {
        const ALL = todo!();
        const PUBLIC = todo!();
        const FRIENDS_ONLY = todo!();
        const PRIVATE = todo!();
        const INVALID = todo!();
    }
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum ELeaderboardUploadScoreMethod {
    #[default]
    ForceUpdate = todo!(),
    KeepBest = todo!(),
    None = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum ELeaderboardDisplayType {
    #[default]
    TimeMilliSeconds = todo!(),
    TimeSeconds = todo!(),
    Numeric = todo!(),
    None = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum ELeaderboardSortMethod {
    #[default]
    Descending = todo!(),
    Ascending = todo!(),
    None = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum ELeaderboardDataRequest {
    #[default]
    Users = todo!(),
    Friends = todo!(),
    GlobalAroundUser = todo!(),
    Global = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EClientStatAggregateMethod {
    #[default]
    Scalar = todo!(),
    Event = todo!(),
    Sum = todo!(),
    LatestOnly = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EClientStat {
    #[default]
    BytesDownloaded = todo!(),
    P2PVoiceConnections = todo!(),
    P2PGameConnections = todo!(),
    P2PConnectionsRelay = todo!(),
    P2PConnectionsUDP = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EDRMBlobDownloadErrorDetail {
    #[default]
    NextBase = todo!(),
    TargetLocked_Max = todo!(),
    TargetLocked_Base = todo!(),
    PathManipulationError = todo!(),
    UnzipValveSignatureHeader = todo!(),
    ApplyValveSignatureHeader = todo!(),
    AppliedSignatureCorrupt = todo!(),
    AppIdUnexpected = todo!(),
    AppIdMismatch = todo!(),
    ApplySignature = todo!(),
    ApplyMergeGuid = todo!(),
    ApplyStrips = todo!(),
    UnzipSignature = todo!(),
    UnzipMergeGuid = todo!(),
    UnzipStrips = todo!(),
    UnknownBlobType = todo!(),
    UnzipFullFile = todo!(),
    UnexpectedZipEntry = todo!(),
    ReadZipDirectory = todo!(),
    OpenZip = todo!(),
    TargetLocked = todo!(),
    DownloadFailed = todo!(),
    None = todo!(),
}

bitflags! {
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct EDRMBlobDownloadType: i32 {
        const LOW_PRIORITY = todo!();
        const ADD_TIMESTAMP = todo!();
        const HIGH_PRIORITY = todo!();
        const IS_JOB = todo!();
        const ALL_MASK = todo!();
        const COMPRESSED = todo!();
        const PARTS = todo!();
        const FILE = todo!();
        const ERROR = todo!();
    }
}

bitflags! {
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct ERemoteStoragePlatform: i32 {
        const ALL = todo!();
        const I_PHONE_OS = todo!();
        const ANDROID = todo!();
        const SWITCH = todo!();
        const LINUX = todo!();
        const PS3 = todo!();
        const OSX = todo!();
        const WINDOWS = todo!();
        const NONE = todo!();
    }
}

bitflags! {
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct EChatFlags: i32 {
        const UNJOINABLE = todo!();
        const MODERATED = todo!();
        const INVISIBLE_TO_FRIENDS = todo!();
        const LOCKED = todo!();
    }
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum ESystemIMType {
    #[default]
    SupportMessageClearAlert = todo!(),
    SupportMessage = todo!(),
    GiftRevoked = todo!(),
    GuestPassGranted = todo!(),
    GuestPassReceived = todo!(),
    SubscriptionExpired = todo!(),
    CardWillExpire = todo!(),
    RecurringPurchaseFailed = todo!(),
    InvalidCard = todo!(),
    RawText = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum ENewsUpdateType {
    #[default]
    ClientUpdate = todo!(),
    CDDBUpdate = todo!(),
    SteamNews = todo!(),
    SteamAds = todo!(),
    AppNews = todo!(),
}

bitflags! {
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct EMarketingMessageFlags: i32 {
        const PLATFORM_RESTRICTIONS = todo!();
        const PLATFORM_LINUX = todo!();
        const PLATFORM_MAC = todo!();
        const PLATFORM_WINDOWS = todo!();
        const HIGH_PRIORITY = todo!();
        const NONE = todo!();
    }
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EEconTradeResponse {
    #[default]
    OKToDeliver = todo!(),
    DisabledInPartnerRegion = todo!(),
    DisabledInRegion = todo!(),
    WouldExceedMaxAssetCount = todo!(),
    TradingHoldForClearedTradeOffersInitiator = todo!(),
    NeedsMobileConfirmation = todo!(),
    InitiatorRecentEmailChange = todo!(),
    NeedsEmailConfirmation = todo!(),
    InitiatorSentInvalidCookie = todo!(),
    InitiatorNewDeviceCooldown = todo!(),
    InitiatorPasswordResetProbation = todo!(),
    InitiatorSteamGuardDuration = todo!(),
    TargetAccountCannotTrade = todo!(),
    InitiatorNeedsSteamGuard = todo!(),
    InitiatorNeedsVerifiedEmail = todo!(),
    InitiatorBlockedTarget = todo!(),
    SchoolLabTarget = todo!(),
    SchoolLabInitiator = todo!(),
    CyberCafeTarget = todo!(),
    CyberCafeInitiator = todo!(),
    NoResponse = todo!(),
    AlreadyHasTradeRequest = todo!(),
    AlreadyTrading = todo!(),
    ConnectionFailed = todo!(),
    TooSoonPenalty = todo!(),
    TooSoon = todo!(),
    Cancel = todo!(),
    NotLoggedIn = todo!(),
    Disabled = todo!(),
    TargetAlreadyTrading = todo!(),
    TradeBannedTarget = todo!(),
    TradeBannedInitiator = todo!(),
    Declined = todo!(),
    Accepted = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EWorkshopFileAction {
    #[default]
    Completed = todo!(),
    Played = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EWorkshopFileType {
    #[default]
    GameManagedItem = todo!(),
    SteamVideo = todo!(),
    SteamworksAccessInvite = todo!(),
    ControllerBinding = todo!(),
    Merch = todo!(),
    IntegratedGuide = todo!(),
    WebGuide = todo!(),
    Concept = todo!(),
    Software = todo!(),
    Game = todo!(),
    Screenshot = todo!(),
    Video = todo!(),
    Art = todo!(),
    Collection = todo!(),
    Microtransaction = todo!(),
    Community = todo!(),
    First = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EPublishedFileVisibility {
    #[default]
    Private = todo!(),
    FriendsOnly = todo!(),
    Public = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EWorkshopEnumerationType {
    #[default]
    RecentFromFollowedUsers = todo!(),
    ContentByFriends = todo!(),
    VotedByFriends = todo!(),
    FavoriteOfFriends = todo!(),
    Trending = todo!(),
    Recent = todo!(),
    RankedByVote = todo!(),
}

bitflags! {
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct EDepotFileFlag: i32 {
        const SYMLINK = todo!();
        const INSTALL_SCRIPT = todo!();
        const CUSTOM_EXECUTABLE = todo!();
        const DIRECTORY = todo!();
        const EXECUTABLE = todo!();
        const HIDDEN = todo!();
        const READ_ONLY = todo!();
        const ENCRYPTED = todo!();
        const VERSIONED_USER_CONFIG = todo!();
        const USER_CONFIG = todo!();
    }
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum ECurrencyCode {
    #[default]
    UYU = todo!(),
    CRC = todo!(),
    QAR = todo!(),
    KWD = todo!(),
    KZT = todo!(),
    BYN = todo!(),
    ILS = todo!(),
    ARS = todo!(),
    AED = todo!(),
    SAR = todo!(),
    TWD = todo!(),
    HKD = todo!(),
    ZAR = todo!(),
    COP = todo!(),
    PEN = todo!(),
    CLP = todo!(),
    INR = todo!(),
    CNY = todo!(),
    NZD = todo!(),
    AUD = todo!(),
    CAD = todo!(),
    MXN = todo!(),
    UAH = todo!(),
    TRY = todo!(),
    KRW = todo!(),
    VND = todo!(),
    THB = todo!(),
    SGD = todo!(),
    PHP = todo!(),
    MYR = todo!(),
    IDR = todo!(),
    NOK = todo!(),
    JPY = todo!(),
    BRL = todo!(),
    PLN = todo!(),
    RUB = todo!(),
    CHF = todo!(),
    EUR = todo!(),
    GBP = todo!(),
    USD = todo!(),
    Invalid = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum ERegionCode {
    #[default]
    World = todo!(),
    Africa = todo!(),
    MiddleEast = todo!(),
    Australia = todo!(),
    Asia = todo!(),
    Europe = todo!(),
    SouthAmerica = todo!(),
    USWest = todo!(),
    USEast = todo!(),
}

bitflags! {
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct EChatMemberStateChange: i32 {
        const VOICE_DONE_SPEAKING = todo!();
        const VOICE_SPEAKING = todo!();
        const BANNED = todo!();
        const KICKED = todo!();
        const DISCONNECTED = todo!();
        const LEFT = todo!();
        const ENTERED = todo!();
    }
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EActivationCodeClass {
    #[default]
    Invalid = todo!(),
    Test = todo!(),
    Max = todo!(),
    Steam2010Key = todo!(),
    DBLookup = todo!(),
    Doom3CDKey = todo!(),
    ValveCDKey = todo!(),
    WonCDKey = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EPackageStatus {
    #[default]
    Invalid = todo!(),
    Unavailable = todo!(),
    Preorder = todo!(),
    Available = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EBillingType {
    #[default]
    NumBillingTypes = todo!(),
    FreeCommercialLicense = todo!(),
    CommercialLicense = todo!(),
    Rental = todo!(),
    FreeOnDemand = todo!(),
    Repurchaseable = todo!(),
    BillOnceOrCDKey = todo!(),
    RecurringOption = todo!(),
    OEMTicket = todo!(),
    AutoGrant = todo!(),
    Gift = todo!(),
    HardwarePromo = todo!(),
    GuestPass = todo!(),
    ProofOfPrepurchaseOnly = todo!(),
    BillMonthly = todo!(),
    BillOnceOnly = todo!(),
    NoCost = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EServerType {
    #[default]
    CrashDump = todo!(),
    China = todo!(),
    SteamAR = todo!(),
    BroadcastChannel = todo!(),
    BroadcastOrigin = todo!(),
    RemoteClient = todo!(),
    TURN = todo!(),
    UGSAggregate = todo!(),
    MLInference = todo!(),
    TaxService = todo!(),
    VACTest = todo!(),
    MLTrain = todo!(),
    Minigame = todo!(),
    ContentServerConfig = todo!(),
    VACDBMaster = todo!(),
    TimeMachine = todo!(),
    Trust = todo!(),
    QMS = todo!(),
    VoiceChat = todo!(),
    ChatRoom = todo!(),
    Giveaway = todo!(),
    WebRTC = todo!(),
    AccountHardware = todo!(),
    Shader = todo!(),
    Chat = todo!(),
    AccountHistory = todo!(),
    Watchdog = todo!(),
    ItemInventory = todo!(),
    Perf = todo!(),
    IDLS = todo!(),
    HLTVRelay = todo!(),
    StoreCatalog = todo!(),
    Auth = todo!(),
    InventoryManagement = todo!(),
    EmailDelivery = todo!(),
    LogWorker = todo!(),
    LogRequest = todo!(),
    Support = todo!(),
    AccountScore = todo!(),
    Phone = todo!(),
    BroadcastChat = todo!(),
    TradeOffer = todo!(),
    VideoManager = todo!(),
    BroadcastDirectory = todo!(),
    BroadcastRelay = todo!(),
    SolrMgr = todo!(),
    PublicTest = todo!(),
    Steam2Emulator = todo!(),
    Localization = todo!(),
    MarketSearch = todo!(),
    MarketRepl = todo!(),
    GameNotifications = todo!(),
    ExternalConfig = todo!(),
    DepotWebContent = todo!(),
    ES = todo!(),
    Partner = todo!(),
    PartnerUpload = todo!(),
    Parental = todo!(),
    ExternalMonitor = todo!(),
    TaxForm = todo!(),
    PNP = todo!(),
    ACS = todo!(),
    WDS = todo!(),
    Quest = todo!(),
    Market = todo!(),
    Logsink = todo!(),
    Secrets = todo!(),
    Trade = todo!(),
    MPAS = todo!(),
    GCH = todo!(),
    BRP = todo!(),
    Workshop = todo!(),
    UMQ = todo!(),
    CRE = todo!(),
    MoneyStats = todo!(),
    StoreFeature = todo!(),
    // renamed to StoreFeature
    // Store = todo!(),
    UGS = todo!(),
    Backpack = todo!(),
    Econ = todo!(),
    FS = todo!(),
    RM = todo!(),
    UCM = todo!(),
    KGS = todo!(),
    GMS = todo!(),
    MMS = todo!(),
    UDS = todo!(),
    WebAPI = todo!(),
    OGS = todo!(),
    NS = todo!(),
    GC = todo!(),
    CS = todo!(),
    MDS = todo!(),
    LBS = todo!(),
    DFS = todo!(),
    CCS = todo!(),
    IS = todo!(),
    PS = todo!(),
    SiteLicense = todo!(),
    // EPMOBSOLETE = todo!(),
    // EPM = todo!(),
    FTS = todo!(),
    Spare = todo!(),
    AppInformation = todo!(),
    // P2PRelayOBSOLETE = todo!(),
    Community = todo!(),
    // renamed to Community
    // DSS = todo!(),
    // Util = todo!(),
    UFS = todo!(),
    SLC = todo!(),
    SM = todo!(),
    WG = todo!(),
    DP = todo!(),
    ContentStats = todo!(),
    // BootstrapOBSOLETE = todo!(),
    // Client = todo!(),
    PICS = todo!(),
    // ASBOBSOLETE = todo!(),
    Console = todo!(),
    // HubOBSOLETE = todo!(),
    DRMS = todo!(),
    SS = todo!(),
    BoxMonitor = todo!(),
    // renamed to BoxMonitor
    // FG = todo!(),
    FBS = todo!(),
    CM = todo!(),
    ATS = todo!(),
    VS = todo!(),
    BS = todo!(),
    AM = todo!(),
    // BUMOBOSOLETE = todo!(),
    // BUM = todo!(),
    GM = todo!(),
    Shell = todo!(),
    First = todo!(),
    Invalid = todo!(),
    CEconBase = todo!(),
    CServer = todo!(),
    Client = todo!(),
    Util = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EOSType {
    #[default]
    WinMAX = todo!(),
    Win11 = todo!(),
    Win2022 = todo!(),
    Win2019 = todo!(),
    Win2016 = todo!(),
    Windows10 = todo!(),
    // renamed to Windows10
    // Win10 = todo!(),
    Win2012R2 = todo!(),
    Windows81 = todo!(),
    // renamed to Windows81
    // Win81 = todo!(),
    Windows8 = todo!(),
    // renamed to Windows8
    // Win8 = todo!(),
    Win2012 = todo!(),
    Win2008 = todo!(),
    Windows7 = todo!(),
    // renamed to Windows7
    // Win7 = todo!(),
    WinVista = todo!(),
    Win2003 = todo!(),
    WinXP = todo!(),
    Win2000 = todo!(),
    // renamed to Win2000
    // Win200 = todo!(),
    WinNT = todo!(),
    WinME = todo!(),
    Win98 = todo!(),
    Win95 = todo!(),
    Win311 = todo!(),
    WinUnknown = todo!(),
    LinuxMax = todo!(),
    Linux510 = todo!(),
    Linux7x = todo!(),
    Linux6x = todo!(),
    Linux54 = todo!(),
    Linux5x = todo!(),
    Linux419 = todo!(),
    Linux414 = todo!(),
    Linux49 = todo!(),
    Linux44 = todo!(),
    Linux41 = todo!(),
    Linux4x = todo!(),
    Linux3x = todo!(),
    Linux318 = todo!(),
    Linux316 = todo!(),
    Linux310 = todo!(),
    Linux36 = todo!(),
    Linux35 = todo!(),
    Linux32 = todo!(),
    Linux26 = todo!(),
    Linux24 = todo!(),
    Linux22 = todo!(),
    LinuxUnknown = todo!(),
    MacOSMax = todo!(),
    MacOS13 = todo!(),
    MacOS12 = todo!(),
    MacOS1017 = todo!(),
    MacOS111 = todo!(),
    MacOS11 = todo!(),
    MacOS1016 = todo!(),
    Macos1015 = todo!(),
    Macos1014 = todo!(),
    Macos1013 = todo!(),
    MacOS1012 = todo!(),
    MacOS1011 = todo!(),
    MacOS1010 = todo!(),
    MacOS109 = todo!(),
    MacOS108 = todo!(),
    MacOS107 = todo!(),
    MacOS1067 = todo!(),
    MacOS1064_slgu = todo!(),
    MacOS1063 = todo!(),
    MacOS106 = todo!(),
    MacOS1058 = todo!(),
    MacOS105 = todo!(),
    MacOS104 = todo!(),
    MacOSUnknown = todo!(),
    PS3 = todo!(),
    UMQ = todo!(),
    Android9 = todo!(),
    Android8 = todo!(),
    Android7 = todo!(),
    Android6 = todo!(),
    AndroidUnknown = todo!(),
    IOS12_1 = todo!(),
    IOS12 = todo!(),
    IOS11_4 = todo!(),
    IOS11_3 = todo!(),
    IOS11_2 = todo!(),
    IOS11_1 = todo!(),
    IOS11 = todo!(),
    IOS10_3 = todo!(),
    IOS10_2 = todo!(),
    IOS10_1 = todo!(),
    IOS10 = todo!(),
    IOS9_3 = todo!(),
    IOS9_2 = todo!(),
    IOS9_1 = todo!(),
    IOS9 = todo!(),
    IOS8_4 = todo!(),
    IOS8_3 = todo!(),
    IOS8_2 = todo!(),
    IOS8_1 = todo!(),
    IOS8 = todo!(),
    IOS7_1 = todo!(),
    IOS7 = todo!(),
    IOS6_1 = todo!(),
    IOS6 = todo!(),
    IOS5 = todo!(),
    IOS4 = todo!(),
    IOS3 = todo!(),
    IOS2 = todo!(),
    IOS1 = todo!(),
    IOSUnknown = todo!(),
    Web = todo!(),
    Unknown = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EPlatformType {
    #[default]
    Linux32 = todo!(),
    PS3 = todo!(),
    OSX = todo!(),
    Linux64 = todo!(),
    // split to Linux64 and Linux32
    // Linux = todo!(),
    Win64 = todo!(),
    Win32 = todo!(),
    Unknown = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EContentDownloadSourceType {
    #[default]
    LANCache = todo!(),
    OpenCache = todo!(),
    SteamCache = todo!(),
    SLS = todo!(),
    LANPeer = todo!(),
    ProxyCache = todo!(),
    LCS = todo!(),
    CDN = todo!(),
    CS = todo!(),
    Invalid = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EAppInfoSection {
    #[default]
    Albummetadata = todo!(),
    Computed = todo!(),
    Broadcastgamedata = todo!(),
    Localization = todo!(),
    Store = todo!(),
    Community = todo!(),
    SysReqs = todo!(),
    Policies = todo!(),
    // ItemsUNUSED = todo!(),
    // Items = todo!(),
    OGG = todo!(),
    UFS = todo!(),
    // DRM_UNUSED = todo!(),
    // DRM = todo!(),
    // VAC_UNUSED = todo!(),
    // VAC = todo!(),
    Depots = todo!(),
    Install = todo!(),
    Stats = todo!(),
    Config = todo!(),
    Extended = todo!(),
    Common = todo!(),
    First = todo!(),
    All = todo!(),
    Unknown = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EChatActionResult {
    #[default]
    VoiceSlotsFull = todo!(),
    ChatFull = todo!(),
    ChatDoesntExist = todo!(),
    NotAllowedOnSelf = todo!(),
    NotAllowedOnChatOwner = todo!(),
    NotAllowedOnBannedUser = todo!(),
    NotAllowedOnClanMember = todo!(),
    NotPermitted = todo!(),
    Error = todo!(),
    Success = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EChatAction {
    #[default]
    SetUnmoderated = todo!(),
    SetModerated = todo!(),
    SetVisibleToFriends = todo!(),
    SetInvisibleToFriends = todo!(),
    SetOwner = todo!(),
    SetUnjoinable = todo!(),
    SetJoinable = todo!(),
    CloseChat = todo!(),
    UnlockChat = todo!(),
    LockChat = todo!(),
    EndVoiceSpeak = todo!(),
    StartVoiceSpeak = todo!(),
    UnBan = todo!(),
    Ban = todo!(),
    Kick = todo!(),
    InviteChat = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EChatInfoType {
    #[default]
    MemberLimitChange = todo!(),
    InfoUpdate = todo!(),
    StateChange = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EChatRoomType {
    #[default]
    Lobby = todo!(),
    MUC = todo!(),
    Friend = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EChatRoomEnterResponse {
    // RankOutOfRange = todo!(),
    // NoRankingDataUser = todo!(),
    // NoRankingDataLobby = todo!(),
    YouBlockedMember = todo!(),
    MemberBlockedYou = todo!(),
    CommunityBan = todo!(),
    ClanDisabled = todo!(),
    Limited = todo!(),
    Banned = todo!(),
    Error = todo!(),
    Full = todo!(),
    NotAllowed = todo!(),
    DoesntExist = todo!(),
    Success = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EAuthSessionResponse {
    #[default]
    PublisherIssuedBan = todo!(),
    AuthTicketInvalid = todo!(),
    AuthTicketInvalidAlreadyUsed = todo!(),
    AuthTicketCanceled = todo!(),
    VACCheckTimedOut = todo!(),
    LoggedInElseWhere = todo!(),
    VACBanned = todo!(),
    NoLicenseOrExpired = todo!(),
    UserNotConnectedToSteam = todo!(),
    OK = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EClanRelationship {
    #[default]
    RequestDenied = todo!(),
    PendingApproval = todo!(),
    KickAcknowledged = todo!(),
    Kicked = todo!(),
    Member = todo!(),
    Invited = todo!(),
    Blocked = todo!(),
    None = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EClanRank {
    #[default]
    Moderator = todo!(),
    Member = todo!(),
    Officer = todo!(),
    Owner = todo!(),
    None = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EDenyReason {
    #[default]
    SteamOwnerLeftGuestUser = todo!(),
    SteamValidationStalled = todo!(),
    SteamResponseTimedOut = todo!(),
    SteamConnectionError = todo!(),
    SteamConnectionLost = todo!(),
    IncompatibleSoftware = todo!(),
    MemoryCorruption = todo!(),
    IncompatibleAnticheat = todo!(),
    UnknownText = todo!(),
    LoggedInElseWhere = todo!(),
    Cheater = todo!(),
    NoLicense = todo!(),
    NotLoggedOn = todo!(),
    Generic = todo!(),
    InvalidVersion = todo!(),
}

bitflags! {
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct EServerFlags: i32 {
        const PRIVATE = todo!();
        const PASSWORDED = todo!();
        const LINUX = todo!();
        const DEDICATED = todo!();
        const SECURE = todo!();
        const ACTIVE = todo!();
        const NONE = todo!();
    }
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EIntroducerRouting {
    #[default]
    P2PNetworking = todo!(),
    P2PVoiceChat = todo!(),
    // FileShare = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EPurchaseResultDetail {
    #[default]
    PaymentMethodNotSupportedForProduct = todo!(),
    PaymentMethodTemporarilyUnavailable = todo!(),
    BillingNameInvalidResemblesCreditCard = todo!(),
    CannotShipToMilitaryPostOffice = todo!(),
    CreditCardNumberInvalid = todo!(),
    AddressInvalid = todo!(),
    UserNotAssociatedWithCafe = todo!(),
    UserAssociatedWithManyCafes = todo!(),
    BusinessStoreCountryCodeMismatch = todo!(),
    ItemsNotAllowedForCommercialUse = todo!(),
    GiftRecipientNotSpecified = todo!(),
    GiftPricingImbalance = todo!(),
    GiftInvalidForRecipientRegion = todo!(),
    GiftAlreadyOwned = todo!(),
    ItemsReservedForCommercialUse = todo!(),
    BlockedByUSGov = todo!(),
    BundleTypeCannotBeGifted = todo!(),
    DelayedCompletion = todo!(),
    PurchaseCannotBeReplayed = todo!(),
    PhysicalProductLimitExceeded = todo!(),
    InvalidTaxAddress = todo!(),
    UnknownGlobalCollectError = todo!(),
    PaypalInternalError = todo!(),
    HungTransactionCancelled = todo!(),
    CannotShipToCountry = todo!(),
    POSACodeNotActivated = todo!(),
    BillingAgreementAlreadyExists = todo!(),
    CartValueTooHigh = todo!(),
    CreditCardBinMismatchesType = todo!(),
    OwnsExcludedApp = todo!(),
    RateLimited = todo!(),
    OverlappingPackagesInPendingTransaction = todo!(),
    PurchaseAmountNoSupportedByProvider = todo!(),
    CannotRedeemCodeFromClient = todo!(),
    NoCachedPaymentMethod = todo!(),
    NoWallet = todo!(),
    OverlappingPackagesInCart = todo!(),
    ExceededSteamLimit = todo!(),
    OtherAbortableInProgress = todo!(),
    AccountLocked = todo!(),
    ExpiredCoupon = todo!(),
    InvalidCoupon = todo!(),
    BillingAgreementCancelled = todo!(),
    CannotShipInternationally = todo!(),
    CannotGiftShippedGoods = todo!(),
    InsufficientInventory = todo!(),
    CannotShipToPOBox = todo!(),
    MustLoginPS3AppForPurchase = todo!(),
    WouldExceedMaxWallet = todo!(),
    TransactionExpired = todo!(),
    ExpiredCard = todo!(),
    EmailNotValidated = todo!(),
    WalletCurrencyMismatch = todo!(),
    PreApprovalDenied = todo!(),
    NeedsPreApproval = todo!(),
    FailedCyberCafe = todo!(),
    FailCurrencyTransProvider = todo!(),
    ForceCanceledPending = todo!(),
    CanceledByNewTransaction = todo!(),
    DoesNotOwnRequiredApp = todo!(),
    StoreBillingCountryMismatch = todo!(),
    InvalidAccount = todo!(),
    AcctNotVerified = todo!(),
    AcctIsBlocked = todo!(),
    RegionNotSupported = todo!(),
    InvalidShippingAddress = todo!(),
    UseOtherFunctionSource = todo!(),
    UseOtherPaymentMethod = todo!(),
    DuplicateActivationCode = todo!(),
    BadActivationCode = todo!(),
    RestrictedCountry = todo!(),
    CancelledByUser = todo!(),
    FraudCheckFailed = todo!(),
    WrongPrice = todo!(),
    AlreadyPurchased = todo!(),
    OthersInProgress = todo!(),
    InvalidData = todo!(),
    InvalidPaymentMethod = todo!(),
    InvalidPackage = todo!(),
    Timeout = todo!(),
    ContactSupport = todo!(),
    InsufficientFunds = todo!(),
    AVSFailure = todo!(),
    NoDetail = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EPaymentMethod {
    #[default]
    Complimentary = todo!(),
    Split = todo!(),
    OEMTicket = todo!(),
    MobileWalletJapan = todo!(),
    Payco = todo!(),
    MasterSubscription = todo!(),
    Promotional = todo!(),
    // renamed to Promotional
    // StorePromotion = todo!(),
    MasterComp = todo!(),
    // renamed to MasterComp
    // SteamPressMaster = todo!(),
    Valve = todo!(),
    Wallet = todo!(),
    BitCoin = todo!(),
    UnionPay = todo!(),
    Trustly = todo!(),
    PagoEfectivo = todo!(),
    SafetyPay = todo!(),
    BBVAContinental = todo!(),
    BancoCreditoDePeru = todo!(),
    MangirKart = todo!(),
    PinValidda = todo!(),
    Paloto = todo!(),
    Efecty = todo!(),
    Exito = todo!(),
    PSE = todo!(),
    OneCard = todo!(),
    WebMoneyJapan = todo!(),
    AutoGrant = todo!(),
    CashU = todo!(),
    PTT = todo!(),
    DenizBank = todo!(),
    Finansbank = todo!(),
    BankAsya = todo!(),
    Halkbank = todo!(),
    YapiKredi = todo!(),
    Akbank = todo!(),
    Garanti = todo!(),
    IsBank = todo!(),
    ThreePay = todo!(),
    SPEI = todo!(),
    Carnet = todo!(),
    ToditoCash = todo!(),
    OXXO = todo!(),
    MaestroBoaCompra = todo!(),
    // renamed to MaestroBoaCompra
    // Maestro = todo!(),
    Payshop = todo!(),
    Multibanco = todo!(),
    GameVoucher = todo!(),
    ConvenientStoreVoucher = todo!(),
    HappymoneyVoucher = todo!(),
    BookVoucher = todo!(),
    CultureVoucher = todo!(),
    Zong = todo!(),
    PayEasy = todo!(),
    // renamed to PayEasy
    // PayEasyJapan = todo!(),
    BankTransferJapan = todo!(),
    CreditCardJapan = todo!(),
    EClubPoints = todo!(),
    Konbini = todo!(),
    Beeline = todo!(),
    ClickAndBuy = todo!(),
    MOLPoints = todo!(),
    AuthorizedDevice = todo!(),
    DinersCardBrazil = todo!(),
    MastercardBrazil = todo!(),
    Hipercard = todo!(),
    Aura = todo!(),
    AmexBrazil = todo!(),
    VisaBrazil = todo!(),
    Pagseguro = todo!(),
    BradescoOnline = todo!(),
    ItauOnline = todo!(),
    BancoDoBrasilOnline = todo!(),
    BoaCompraGold = todo!(),
    BoletoBancario = todo!(),
    MoPay = todo!(),
    HardwarePromo = todo!(),
    GameStop = todo!(),
    Qiwi = todo!(),
    Kiosk = todo!(),
    Yandex = todo!(),
    AliPay = todo!(),
    MoneyBookers = todo!(),
    WebMoney = todo!(),
    GuestPass = todo!(),
    Sofort = todo!(),
    PaySafeCard = todo!(),
    Ideal = todo!(),
    PayPal = todo!(),
    Giropay = todo!(),
    CreditCard = todo!(),
    ActivationCode = todo!(),
    None = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum ELicenseType {
    #[default]
    LimitedUseDelayedActivation = todo!(),
    RecurringOption = todo!(),
    RecurringChargeLimitedUseWithOverages = todo!(),
    RecurringChargeLimitedUse = todo!(),
    RecurringCharge = todo!(),
    SinglePurchaseLimitedUse = todo!(),
    SinglePurchase = todo!(),
    NoLicense = todo!(),
}

bitflags! {
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct ELicenseFlags: i32 {
        const NOT_ACTIVATED = todo!();
        const CANCELLED_BY_FRIENDLY_FRAUD_LOCK = todo!();
        const REGION_RESTRICTION_EXPIRED = todo!();
        const FORCE_RUN_RESTRICTION = todo!();
        const IMPORTED_FROM_STEAM2 = todo!();
        const LOW_VIOLENCE_CONTENT = todo!();
        const CANCELLED_BY_ADMIN = todo!();
        const CANCELLED_BY_USER = todo!();
        const EXPIRED = todo!();
        const PENDING = todo!();
        const RENEWAL_FAILED = todo!();
        const RENEW = todo!();
        const NONE = todo!();
    }
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EAppUsageEvent {
    #[default]
    GameLaunchFreeWeekend = todo!(),
    InGameAdViewed = todo!(),
    MarketingMessageView = todo!(),
    PreloadFinish = todo!(),
    PreloadStart = todo!(),
    Media = todo!(),
    GameLaunchTrial = todo!(),
    GameLaunch = todo!(),
}

bitflags! {
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct EClientPersonaStateFlag: i32 {
        const WATCHING = todo!();
        const BROADCAST = todo!();
        const RICH_PRESENCE = todo!();
        const FACEBOOK = todo!();
        const CLAN_DATA = todo!();
        #[deprecated = "renamed to ClanData"]
        const CLAN_TAG = todo!();
        const GAME_DATA_BLOB = todo!();
        const GAME_EXTRA_INFO = todo!();
        const USER_CLAN_RANK = todo!();
        #[deprecated = "renamed to UserClanRank"]
        const CLAN_INFO = todo!();
        const LAST_SEEN = todo!();
        // const METADATA = todo!();
        const PRESENCE = todo!();
        const SOURCE_ID = todo!();
        const QUERY_PORT = todo!();
        const PLAYER_NAME = todo!();
        const STATUS = todo!();
    }
}

bitflags! {
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct EPersonaStateFlag: i32 {
        const LAUNCH_TYPE_COMPAT_TOOL = todo!();
        const LAUNCH_TYPE_GAMEPAD = todo!();
        const CLIENT_TYPE_VR = todo!();
        // renamed to ClientTypeVR
        // const ONLINE_USING_VR = todo!();
        const CLIENT_TYPE_TENFOOT = todo!();
        // renamed to ClientTypeTenfoot
        // const ONLINE_USING_BIG_PICTURE = todo!();
        const CLIENT_TYPE_MOBILE = todo!();
        // renamed to ClientTypeMobile
        // const ONLINE_USING_MOBILE = todo!();
        const CLIENT_TYPE_WEB = todo!();
        // renamed to ClientTypeWeb
        // const ONLINE_USING_WEB = todo!();
        const REMOTE_PLAY_TOGETHER = todo!();
        const GOLDEN = todo!();
        const IN_JOINABLE_GAME = todo!();
        const HAS_RICH_PRESENCE = todo!();
    }
}

bitflags! {
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct EFriendFlags: i32 {
        const FLAG_ALL = todo!();
        const CHAT_MEMBER = todo!();
        const SUGGESTED = todo!();
        const IGNORED_FRIEND = todo!();
        const IGNORED = todo!();
        const REQUESTING_INFO = todo!();
        const REQUESTING_FRIENDSHIP = todo!();
        const ON_GAME_SERVER = todo!();
        const CLAN_MEMBER = todo!();
        const IMMEDIATE = todo!();
        const FRIENDSHIP_REQUESTED = todo!();
        const BLOCKED = todo!();
        const NONE = todo!();
    }
}

bitflags! {
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct EChatPermission: i32 {
        const MASK = todo!();
        const OWNER_DEFAULT = todo!();
        const OFFICER_DEFAULT = todo!();
        const MEMBER_DEFAULT = todo!();
        const EVERYONE_DEFAULT = todo!();
        const EVERYONE_NOT_IN_CLAN_DEFAULT = todo!();
        const CHANGE_ACCESS = todo!();
        const BAN = todo!();
        const CHANGE_PERMISSIONS = todo!();
        const SET_METADATA = todo!();
        const MUTE = todo!();
        const KICK = todo!();
        const TALK = todo!();
        const INVITE = todo!();
        const CLOSE = todo!();
    }
}

bitflags! {
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct EClanPermission: i32 {
        const ANYBODY = todo!();
        const OWNER_ALLOWED = todo!();
        const OFFICER_ALLOWED = todo!();
        const MODERATOR_ALLOWED = todo!();
        const MEMBER_ALLOWED = todo!();
        const NON_MEMBER = todo!();
        const OGG_GAME_OWNER = todo!();
        const ALL_MEMBERS = todo!();
        const OWNER_OFFICER_MODERATOR = todo!();
        const MODERATOR = todo!();
        const MEMBER = todo!();
        const OWNER_AND_OFFICER = todo!();
        const OFFICER = todo!();
        const OWNER = todo!();
        const NOBODY = todo!();
    }
}

bitflags! {
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct EAccountFlags: i32 {
        const NEEDS_SSA_NEXT_STEAM_LOGON = todo!();
        const THIRD_PARTY_SUPPORT = todo!();
        const PARENTAL_SETTINGS = todo!();
        const GLOBAL_MODERATOR = todo!();
        const CLANS_ONLY_FROM_FRIENDS = todo!();
        const BANNED_FROM_WEB_API = todo!();
        const MASTER_APP_EDITOR = todo!();
        const LOCKDOWN = todo!();
        const NEED_LOGS = todo!();
        const STEAM2_MIGRATION_COMPLETE = todo!();
        const LOGON_EXTRA_SECURITY_DISABLED = todo!();
        const LOGON_EXTRA_SECURITY = todo!();
        const FORCE_EMAIL_VERIFICATION = todo!();
        const FORCE_PASSWORD_CHANGE = todo!();
        const OGG_INVITE_OPT_OUT = todo!();
        const MARKETING_TREATMENT = todo!();
        const EMAIL_VALIDATED = todo!();
        const LIMITED_USER_FORCE = todo!();
        const LIMITED_USER = todo!();
        const DISABLED = todo!();
        const DEBUG = todo!();
        const VAC_BETA = todo!();
        const PERSONAL_QA_SET = todo!();
        const HWID_SET = todo!();
        const APP_EDITOR = todo!();
        const SUPERVISOR = todo!();
        const ADMIN = todo!();
        const SUPPORT = todo!();
        const PASSWORD_SET = todo!();
        const UNBANNABLE = todo!();
        const PERSONA_NAME_SET = todo!();
        const NORMAL_USER = todo!();
    }
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EFriendRelationship {
    // was used by the original implementation of the facebook linking feature; but now unused.
    // SuggestedFriend = todo!(),
    IgnoredFriend = todo!(),
    Ignored = todo!(),
    RequestInitiator = todo!(),
    Friend = todo!(),
    RequestRecipient = todo!(),
    Blocked = todo!(),
    None = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EAccountType {
    #[default]
    AnonUser = todo!(),
    ConsoleUser = todo!(),
    Chat = todo!(),
    Clan = todo!(),
    ContentServer = todo!(),
    Pending = todo!(),
    AnonGameServer = todo!(),
    GameServer = todo!(),
    Multiseat = todo!(),
    Individual = todo!(),
    Invalid = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EPersonaState {
    #[default]
    Invisible = todo!(),
    LookingToPlay = todo!(),
    LookingToTrade = todo!(),
    Snooze = todo!(),
    Away = todo!(),
    Busy = todo!(),
    Online = todo!(),
    Offline = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EChatEntryType {
    #[default]
    LinkBlocked = todo!(),
    Reserved2 = todo!(),
    Reserved1 = todo!(),
    HistoricalChat = todo!(),
    Disconnected = todo!(),
    WasBanned = todo!(),
    WasKicked = todo!(),
    Entered = todo!(),
    LeftConversation = todo!(),
    // Listen for LobbyGameCreated_t callback instead
    // LobbyGameStart = todo!(),
    // No longer supported by clients
    // Emote = todo!(),
    InviteGame = todo!(),
    Typing = todo!(),
    ChatMsg = todo!(),
    Invalid = todo!(),
}

#[derive(Default, Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[derive(FromPrimitive, ToPrimitive)]
#[repr(i32)]
pub enum EUniverse {
    #[default]
    Dev = todo!(),
    Internal = todo!(),
    Beta = todo!(),
    Public = todo!(),
    Invalid = todo!(),
}
